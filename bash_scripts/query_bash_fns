#!/bin/bash

#shopt -s expand_aliases
#source ~/.aliases

getColorizedString()
{
    local str=$1
    local color=$2
    GREEN="\033[32m"
    YELLOW="\033[33m"
    LIGHTRED="\033[91m"
    NORM="\033[0m"

    case $color in
	"green")
	    outStr=$GREEN$str$NORM
	    echo "$outStr"
	    ;;
	"yellow")
	    outStr=$YELLOW$str$NORM
	    echo "$outStr"
	    ;;
	"lightred")
	    outStr=$LIGHTRED$str$NORM
	    echo "$outStr"
	    ;;
	*)
	    ;;
    esac
}

colorize()
{
    local inStr=$1
    local color=$2
    
    echo -e $(getColorizedString "$inStr" "$color")
}

annotate()
{
    line=$1
    color=$2

    colorize "============================================================" $color
    colorize "$line" $color
    colorize "============================================================" $color
}

filename()
{
    path=$1
    riakTestDir=`pwd`
    echo "$riakTestDir/$path"
}

substitute()
{
    path=$1
    fromStr=$2
    toStr=$3

    local file=$(filename $path)
    sed -i '.sed' "s/$fromStr/$toStr/g" $file
}

writeQueryFiles()
{
    if [ $# -lt 2 ]
    then
	echo "Usage: writeQueryFile nRecord nQuery"
	return
    fi

    nRecord=$1
    nQuery=$2

    useFilter='false'
    if [ $# -eq 3 ]
    then
	useFilter=$3
    fi

    #------------------------------------------------------------
    # Create the test file, that just writes the records and runs the
    # queries
    #------------------------------------------------------------

    prefix="ts_query_"$nRecord"_"$nQuery"_"$useFilter
    filename="tests/"$prefix".erl"

    echo "-module($prefix)." > $filename
    echo "-behavior(riak_test)." >> $filename
    echo "-export([confirm/0])." >> $filename
    echo "" >> $filename
    echo "-include_lib(\"profiler/include/profiler.hrl\")." >> $filename
    echo "" >> $filename
    echo "confirm() ->" >> $filename
    echo "  profiler:profile({prefix, \"/tmp/client_profiler_results\"})," >> $filename
    echo "  profiler:profile({noop, false})," >> $filename

    echo "" >> $filename
    echo "  DDL  = ts_api_util:get_ddl(api)," >> $filename
    echo "  ts_api_util:setup_cluster_timeseries(single, n_val_one, DDL, $nRecord, 1, true)," >> $filename

    if [ $useFilter == 'true' ]
    then
	echo "  Query = \"SELECT * FROM GeoCheckin WHERE time >= 0 AND time <= "$nRecord" AND myfamily = 'family1' AND myseries = 'seriesX' and myint > 0\"," >> $filename
    else
	echo "  Query = \"SELECT * FROM GeoCheckin WHERE time >= 0 AND time <= "$nRecord" AND myfamily = 'family1' AND myseries = 'seriesX'\"," >> $filename
    fi
    

    echo "" >> $filename
    echo "  profiler:profile({start, 0})," >> $filename
    echo "  ts_api_util:runQuery(Query, $nQuery)," >> $filename
    echo "  profiler:profile({stop, 0})," >> $filename
    echo "" >> $filename
    echo "  pass." >> $filename

    #------------------------------------------------------------
    # Now create a baseline file, that just writes the records
    #------------------------------------------------------------
    
    prefix="ts_query_"$nRecord"_"$nQuery"_"$useFilter"_base"
    filename="tests/"$prefix".erl"

    echo "-module($prefix)." > $filename
    echo "-behavior(riak_test)." >> $filename
    echo "-export([confirm/0])." >> $filename
    echo "" >> $filename
    echo "-include_lib(\"profiler/include/profiler.hrl\")." >> $filename
    echo "" >> $filename
    echo "confirm() ->" >> $filename
    echo "  profiler:profile({prefix, \"/tmp/client_profiler_results\"})," >> $filename
    echo "" >> $filename
    echo "  DDL  = ts_api_util:get_ddl(api)," >> $filename
    echo "  UseNativeEncoding=true," >> $filename
    echo "  ts_api_util:setup_cluster_put_mod_time(single, n_val_one, DDL, $nRecord, true, UseNativeEncoding)," >> $filename
    echo "" >> $filename
    echo "  pass." >> $filename

    #------------------------------------------------------------
    # Now create a file to measure the profiler itself
    #------------------------------------------------------------

    filename="tests/ts_query_profiler_baseline.erl"

    echo "-module(ts_query_profiler_baseline)." > $filename
    echo "-behavior(riak_test)." >> $filename
    echo "-export([confirm/0])." >> $filename
    echo "" >> $filename
    echo "-include_lib(\"profiler/include/profiler.hrl\")." >> $filename
    echo "" >> $filename
    echo "foldProf(N) ->" >> $filename
    echo "    foldProf(N, N)." >> $filename
    echo "" >> $filename
    echo "foldProf(_N, 0) ->" >> $filename
    echo "    ok;" >> $filename
    echo "foldProf(N, Acc) ->" >> $filename
    echo "    profiler:perf_profile({start, 1, ?FNNAME()})," >> $filename
    echo "    profiler:perf_profile({stop, 1})," >> $filename
    echo "    foldProf(N, Acc-1)." >> $filename
    echo "" >> $filename
    echo "confirm() ->" >> $filename
    echo "    profiler:profile({prefix, \"/tmp/client_profiler_results\"})," >> $filename
    echo "" >> $filename
    echo "    profiler:perf_profile({start, 0, ?FNNAME()})," >> $filename
    echo "    foldProf(1000000)," >> $filename
    echo "    profiler:perf_profile({stop, 0})," >> $filename
    echo "" >> $filename
    echo "    pass." >> $filename
}

writeBedeQueryFiles()
{
    if [ $# -lt 2 ]
    then
	echo "Usage: writeQueryFile nRecord nQuery [nUser=1, useFilter=false]"
	return
    fi

    nRecord=$1
    nQuery=$2

    nUser=1
    if [ $# -gt 2 ]
    then
	nUser=$3
    fi

    useFilter='false'
    if [ $# -gt 3 ]
    then
	useFilter=$4
    fi

    #------------------------------------------------------------
    # Create the test file that writes the records and runs the
    # queries
    #------------------------------------------------------------

    prefix="ts_bede_query_"$nRecord"_"$nQuery"_"$nUser"_"$useFilter
    filename="tests/"$prefix".erl"

    echo "-module($prefix)." > $filename
    echo "-behavior(riak_test)." >> $filename
    echo "-export([confirm/0])." >> $filename
    echo "" >> $filename
    echo "-include_lib(\"profiler/include/profiler.hrl\")." >> $filename
    echo "" >> $filename
    echo "confirm() ->" >> $filename
    echo "  profiler:profile({prefix, \"/tmp/client_profiler_results\"})," >> $filename
    echo "  profiler:profile({noop, false})," >> $filename
    echo "" >> $filename
    echo "  DDL  = ts_api_util:get_ddl(bede_repart)," >> $filename
    echo "  [C, Bucket] = ts_api_util:build_and_activate_cluster_bede(single, n_val_one, DDL)," >> $filename
    echo "" >> $filename
    echo "  profiler:profile({start, \"total\"})," >> $filename
    echo "  ok = ts_api_util:putBedeUserData(C, Bucket, "$nUser", "$nRecord", 1, true)," >> $filename

    echo "" >> $filename
    echo "  Query = \"SELECT * FROM Bede WHERE UserId='user0' AND UtcTime > 0 AND UtcTime <= "$nRecord"\"," >> $filename

    echo "" >> $filename
    echo "  ts_api_util:runQuery(C, Query, $nQuery, $nQuery)," >> $filename
    echo "  profiler:profile({stop, \"total\"})," >> $filename
    echo "" >> $filename
    echo "  pass." >> $filename

    #------------------------------------------------------------
    # Now create a baseline file, that just writes the records without
    # querying
    #------------------------------------------------------------
    
    prefix="ts_bede_query_"$nRecord"_"$nQuery"_"$nUser"_"$useFilter"_base"
    filename="tests/"$prefix".erl"

    echo "-module($prefix)." > $filename
    echo "-behavior(riak_test)." >> $filename
    echo "-export([confirm/0])." >> $filename
    echo "" >> $filename
    echo "-include_lib(\"profiler/include/profiler.hrl\")." >> $filename
    echo "" >> $filename
    echo "confirm() ->" >> $filename
    echo "  profiler:profile({prefix, \"/tmp/client_profiler_results\"})," >> $filename
    echo "  profiler:profile({noop, false})," >> $filename
    echo "" >> $filename

    echo "  DDL  = ts_api_util:get_ddl(bede_repart)," >> $filename
    echo "  [C, Bucket] = ts_api_util:build_and_activate_cluster_bede(single, n_val_one, DDL)," >> $filename
    echo "" >> $filename
    echo "  profiler:profile({start, \"total\"})," >> $filename
    echo "  ok = ts_api_util:putBedeUserData(C, Bucket, "$nUser","$nRecord", 1, true)," >> $filename
    echo "  profiler:profile({stop, \"total\"})," >> $filename
    echo "" >> $filename
    echo "  pass." >> $filename

    #------------------------------------------------------------
    # Now create a file to measure the profiler itself
    #------------------------------------------------------------

    filename="tests/ts_query_profiler_baseline.erl"

    echo "-module(ts_query_profiler_baseline)." > $filename
    echo "-behavior(riak_test)." >> $filename
    echo "-export([confirm/0])." >> $filename
    echo "" >> $filename
    echo "-include_lib(\"profiler/include/profiler.hrl\")." >> $filename
    echo "" >> $filename
    echo "foldProf(N) ->" >> $filename
    echo "    foldProf(N, N)." >> $filename
    echo "" >> $filename
    echo "foldProf(_N, 0) ->" >> $filename
    echo "    ok;" >> $filename
    echo "foldProf(N, Acc) ->" >> $filename
    echo "    profiler:perf_profile({start, 1, ?FNNAME()})," >> $filename
    echo "    profiler:perf_profile({stop, 1})," >> $filename
    echo "    foldProf(N, Acc-1)." >> $filename
    echo "" >> $filename
    echo "confirm() ->" >> $filename
    echo "    profiler:profile({prefix, \"/tmp/client_profiler_results\"})," >> $filename
    echo "    profiler:profile({noop, false})," >> $filename
    echo "" >> $filename
    echo "    profiler:perf_profile({start, \"total\"})," >> $filename
    echo "    foldProf(1000000)," >> $filename
    echo "    profiler:perf_profile({stop, \"total\"})," >> $filename
    echo "" >> $filename
    echo "    pass." >> $filename
}

runBedeQueryProfile()
{
    echo "Narg = $#"
    
    if [ $# -lt 2 ]
    then
	echo "Usage: runProfile nRecord nQuery [nUser (1)] [useFilter (true|false)] [riak_ee makeTarget]"
	return
    fi

    nRecord=$1
    nQuery=$2

    annotate "Creating profiler output directories" "green"

    if [ ! -d /tmp/client_profiler_results ]
    then
	mkdir /tmp/client_profiler_results
    fi

    if [ ! -d /tmp/server_profiler_results ]
    then
	mkdir /tmp/server_profiler_results
    fi

    #------------------------------------------------------------
    # Create the test files
    #------------------------------------------------------------

    annotate "Creating test files" "green"

    nUser=1
    if [ $# -gt 2 ]
    then
	nUser=$3
    fi

    useFilter='false'
    if [ $# -gt 3 ]
    then
	useFilter=$4
    fi

    writeBedeQueryFiles $nRecord $nQuery $nUser $useFilter
    
    filePrefix="ts_bede_query_"$nRecord"_"$nQuery"_"$nUser"_"$useFilter

    makeTarget=''
    if [ $# -eq 4 ]
    then
	makeTarget=$4
	outDir=$filePrefix"_"$makeTarget"_output"
	graphPrefix=$filePrefix"_"$makeTarget
    else
	outDir=$filePrefix"_output"
	graphPrefix=$filePrefix
    fi
    
    basePrefix=$filePrefix"_base"

    #------------------------------------------------------------
    # Create the output directory if it doesn't exist
    #------------------------------------------------------------

    annotate "Creating output directory $outDir" "green"

    echo "dir  = $outDir"
    echo "base = $basePrefix"
    echo "file = $filePrefix"
    
    if [ ! -d $outDir ]
    then
	mkdir $outDir
    fi

    echo "import riak_ts_profiles as rp" > $outDir/makeGraph.py
    
    echo "rp.makeQueryGraph('$graphPrefix', $nRecord, $nQuery, 'client.txt', 'server.txt', 'clientbase.txt', 'serverbase.txt', 'clientcomp.txt', 'profbase.txt')" >> $outDir/makeGraph.py

    #------------------------------------------------------------
    # Make sure profiler output directories exist
    #------------------------------------------------------------
    
    if [ ! -d ./client_profiler_results ]
    then
	mkdir ./client_profiler_results
    fi

    if [ ! -d ./server_profiler_results ]
    then
	mkdir ./server_profiler_results
    fi

    #------------------------------------------------------------
    # Copy scripts we need from the profiling scripts dir
    #------------------------------------------------------------

    copyscripts $vers
    
    #------------------------------------------------------------
    # Comment out the profiler macros, and run the test, to get an
    # idea of the impact of the profiling
    #------------------------------------------------------------

    annotate "Compiling with profiler macros commented out " "green"
    
    riakTestDir=`pwd`

    cd $riakTestDir
    commentVar deps/profiler/include/profiler.hrl PROFILE
    cd $riakTestDir/deps/profiler
    make

    cd $riakTestDir
    commentVar riak_ee/deps/profiler/include/profiler.hrl PROFILE
    cd $riakTestDir/riak_ee/deps/profiler
    make

    cd $riakTestDir/riak_ee
    redev_fn $riakTestDir 1

    cd $riakTestDir
    make

    annotate "Running test with "$filePrefix" profiler macros commented out " "green"

    riaktest $filePrefix
    copylast /tmp $outDir "comp"

    #------------------------------------------------------------
    # Now make sure the profile preprocessor directive is defined in
    # both the client and server, and run first the baseline, then a
    # test measuring the profiler timing, then the actual test itself
    # ------------------------------------------------------------

    annotate "Compiling with profiler macros uncommented..." "green"
    
    cd $riakTestDir
    uncommentVar deps/profiler/include/profiler.hrl PROFILE
    cd $riakTestDir/deps/profiler
    make

    cd $riakTestDir
    uncommentVar riak_ee/deps/profiler/include/profiler.hrl PROFILE
    cd $riakTestDir/riak_ee/deps/profiler
    make
    
    cd $riakTestDir/riak_ee
    redev_fn $riakTestDir 1

    cd $riakTestDir
    make
    
    #------------------------------------------------------------
    # Run the baseline
    #------------------------------------------------------------

    annotate "Running baseline test ("$basePrefix")..." "green"
    
    riaktest $basePrefix
    copylast /tmp $outDir "base"

    annotate "Measuring profiler (ts_query_profiler_baseline)..." "green"
    
    riaktest ts_query_profiler_baseline
    copylast /tmp $outDir "profbase"

    #------------------------------------------------------------
    # Run the query test
    #------------------------------------------------------------

    annotate "Running query test ("$filePrefix")..." "green"
    
    riaktest $filePrefix
    copylast /tmp $outDir "test"

    #------------------------------------------------------------
    # Finally generate the graph
    #------------------------------------------------------------

    cd $outDir
    python makeGraph.py
    cd ../
    preview $outDir"/"$graphPrefix".png"
}
