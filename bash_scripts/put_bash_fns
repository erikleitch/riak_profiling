#!/bin/bash

writePutFiles()
{
    if [ $# -lt 1 ]
    then
	echo "Usage: writePutFile nRecord"
	return
    fi

    nRecord=$1

    #------------------------------------------------------------
    # Create the test file, that just writes the records
    #------------------------------------------------------------

    prefix="ts_put_"$nRecord
    filename="tests/"$prefix".erl"

    echo "-module($prefix)." > $filename
    echo "-behavior(riak_test)." >> $filename
    echo "-export([confirm/0])." >> $filename
    echo "" >> $filename
    echo "-include_lib(\"profiler/include/profiler.hrl\")." >> $filename
    echo "" >> $filename
    echo "confirm() ->" >> $filename
    echo "  profiler:profile({prefix, \"/tmp/client_profiler_results\"})," >> $filename
    echo "  profiler:profile({noop, false})," >> $filename

    echo "  DDL  = ts_api_util:get_ddl(api)," >> $filename
    echo "  [C, Bucket] = ts_api_util:build_and_activate_cluster_timeseries(single, n_val_one, DDL)," >> $filename
    echo "  Data = [[<<\"family1\">>, <<\"seriesX\">>, 100, 1, <<\"test1\">>, 1.0, true]]," >> $filename
    echo "" >> $filename
    echo "  profiler:profile({start, \"total\"})," >> $filename
    echo "  ok = ts_api_util:putDataModTime(C, Bucket, Data, $nRecord, 1, true)," >> $filename
    echo "  profiler:profile({stop, \"total\"})," >> $filename
    echo "" >> $filename
    
    echo "  pass." >> $filename

    #------------------------------------------------------------
    # Now create a file to measure the profiler itself
    #------------------------------------------------------------

    filename="tests/ts_profiler_baseline.erl"

    echo "-module(ts_profiler_baseline)." > $filename
    echo "-behavior(riak_test)." >> $filename
    echo "-export([confirm/0])." >> $filename
    echo "" >> $filename
    echo "-include_lib(\"profiler/include/profiler.hrl\")." >> $filename
    echo "" >> $filename
    echo "foldProf(N) ->" >> $filename
    echo "    foldProf(N, N)." >> $filename
    echo "" >> $filename
    echo "foldProf(_N, 0) ->" >> $filename
    echo "    ok;" >> $filename
    echo "foldProf(N, Acc) ->" >> $filename
    echo "    profiler:perf_profile({start, ?FNNAME()})," >> $filename
    echo "    profiler:perf_profile({stop,  ?FNNAME()})," >> $filename
    echo "    foldProf(N, Acc-1)." >> $filename
    echo "" >> $filename
    echo "confirm() ->" >> $filename
    echo "    profiler:profile({prefix, \"/tmp/client_profiler_results\"})," >> $filename
    echo "" >> $filename
    echo "    profiler:perf_profile({start, \"total\"})," >> $filename
    echo "    foldProf(1000000)," >> $filename
    echo "    profiler:perf_profile({stop, \"total\"})," >> $filename
    echo "" >> $filename
    echo "    pass." >> $filename
}

runPutProfile()
{
    echo "Narg = $#"
    
    if [ $# -lt 1 ]
    then
	echo "Usage: runPutProfile nRecord [TS1.3|TS1.1]"
	return
    fi

    nRecord=$1

    vers="TS1.3"3
    if [ $# -eq 2 ]
    then
	vers=$2
    fi

    annotate "Creating profiler output directories" "green"

    if [ ! -d /tmp/client_profiler_results ]
    then
	mkdir /tmp/client_profiler_results
    fi

    if [ ! -d /tmp/server_profiler_results ]
    then
	mkdir /tmp/server_profiler_results
    fi

    #------------------------------------------------------------
    # Create the test files
    #------------------------------------------------------------

    annotate "Creating version $vers test files" "green"

    writePutFiles $nRecord
    
    filePrefix="ts_put_"$nRecord

    outDir=$filePrefix"_output"
    graphPrefix=$filePrefix
    basePrefix=$filePrefix"_base"

    #------------------------------------------------------------
    # Create the output directory if it doesn't exist
    #------------------------------------------------------------

    annotate "Creating output directory $outDir" "green"

    echo "dir  = $outDir"
    echo "base = $basePrefix"
    echo "file = $filePrefix"
    
    if [ ! -d $outDir ]
    then
	mkdir $outDir
    fi

    echo "import riak_ts_profiles as rp" > $outDir/makeGraph.py

    case $vers in
	"TS1.3")
	    echo "rp.makeTs1_3PutGraph('$graphPrefix', $nRecord, 'client.txt', 'server.txt', 'clientcomp.txt', None)" >> $outDir/makeGraph.py
	    ;;
	(*)
	    echo "rp.makeTs1_1PutGraph('$graphPrefix', $nRecord, 'client.txt', 'server.txt', 'clientcomp.txt', None)" >> $outDir/makeGraph.py
	    ;;
    esac

    #------------------------------------------------------------
    # Make sure profiler output directories exist
    #------------------------------------------------------------
    
    if [ ! -d ./client_profiler_results ]
    then
	mkdir ./client_profiler_results
    fi

    if [ ! -d ./server_profiler_results ]
    then
	mkdir ./server_profiler_results
    fi

    #------------------------------------------------------------
    # Copy scripts we need from the profiling scripts dir
    #------------------------------------------------------------

    copyscripts $vers
    
    #------------------------------------------------------------
    # Comment out the profiler macros, and run the test, to get an
    # idea of the impact of the profiling
    #------------------------------------------------------------

    annotate "Compiling with profiler macros commented out " "green"
    
    riakTestDir=`pwd`

    cd $riakTestDir
    commentVar deps/profiler/include/profiler.hrl PROFILE
    cd deps/profiler;make
    
    cd $riakTestDir
    commentVar riak_ee/deps/profiler/include/profiler.hrl PROFILE
    cd riak_ee/deps/profiler;make

    cd $riakTestDir/riak_ee
    redev_fn $riakTestDir 1

    cd $riakTestDir
    make

    annotate "Running test with profiler macros commented out " "green"

    riaktest $filePrefix
    copylast /tmp $outDir "comp"

    #------------------------------------------------------------
    # Now make sure the profile preprocessor directive is defined in
    # both the client and server, and run first the baseline, then a
    # test measuring the profiler timing, then the actual test itself
    # ------------------------------------------------------------

    annotate "Compiling with profiler macros uncommented..." "green"
    
    cd $riakTestDir
    uncommentVar deps/profiler/include/profiler.hrl PROFILE
    cd $riakTestDir/deps/profiler
    make

    cd $riakTestDir
    uncommentVar riak_ee/deps/profiler/include/profiler.hrl PROFILE
    cd $riakTestDir/riak_ee/deps/profiler
    make
    
    cd $riakTestDir/riak_ee
    redev_fn $riakTestDir 1

    cd $riakTestDir
    make
    
    #------------------------------------------------------------
    # Measure the profiler itself
    #------------------------------------------------------------

    annotate "Measuring profiler..." "green"
    
    riaktest ts_profiler_baseline
    copylast /tmp $outDir "profbase"

    #------------------------------------------------------------
    # Run the put test
    #------------------------------------------------------------
    
    annotate "Running put test..." "green"
    
    riaktest $filePrefix
    copylast /tmp $outDir "test"

    #------------------------------------------------------------
    # Finally generate the graph
    #------------------------------------------------------------

    cd $outDir
    python makeGraph.py
    cd ../
    preview $outDir"/"$graphPrefix".png"
}

