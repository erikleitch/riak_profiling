#!/bin/bash

#============================================================
# Arg parsing functions
#============================================================

#------------------------------------------------------------
# Given a possible list of var=val args, return the specified value
# for a named parameter, or its default value
#
# Use like:
#
#      valOrDef myvar defval              (returns defval)
#      valOrDef myvar defval myvar=newval (returns newval)
#
#------------------------------------------------------------
valOrDef()
{
    argname=$1
    defval=$2

    shift 2

    retval=\"$defval\"
    for i
    do
	keyval=($(sep $i "="))
	key=${keyval[0]}
	key=${key//\"/}
	val=${keyval[1]}

        case $key in
	    $argname)
		retval=${val//^/ }
		;;
	    *)
		;;
	esac

    done
    echo $retval
}

#============================================================
# Separate a string by the first occurrence of the specified separator
#============================================================

sep()
{
    s=$1
    sep=$2
    case $s in
	(*"$sep"*)
	    before=${s%%"$sep"*}
	    after=${s#*"$sep"}
	    ;;
	(*)
	    before=$s
	    after=
	    ;;
    esac
    after=${after//\"/\\\"}
    echo "\"$before\" \"$after\""
}

commentedVar()
{
    var=$1
    echo "%\-define($var, 1)"
}

uncommentedVar()
{
    var=$1
    echo "\-define($var, 1)"
}

commentVar()
{
    path=$1
    var=$2
    if [ $(varIsCommented $path $var) == "false" ]
    then
	echo "Var is NOT commented"
	substitute $path "$(uncommentedVar $var)" "$(commentedVar $var)"
    fi
}

uncommentVar()
{
    path=$1
    var=$2

    echo $(commentedVar $var) 
    echo $(uncommentedVar $var)

    if [ $(varIsCommented $path $var) == "true" ]
    then
	substitute $path "$(commentedVar $var)" "$(uncommentedVar $var)"
    fi
}

varIsCommented()
{
    path=$1
    var=$2
    str=$(commentedVar $var)
    local file=$(filename $path)
    res=`grep "$str" $file`

    if [ ! -z "$res" ] 
    then
	echo "true"
    else
	echo "false"
    fi
}

filename()
{
    path=$1
    riakTestDir=`pwd`
    echo "$riakTestDir/$path"
}

substitute()
{
    path=$1
    fromStr=$2
    toStr=$3

    local file=$(filename $path)
    sed -i '.sed' "s/$fromStr/$toStr/g" $file
}
