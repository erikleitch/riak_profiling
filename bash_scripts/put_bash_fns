#!/bin/bash

writePutFiles()
{
    if [ $# -lt 2 ]
    then
	echo "Usage: writePutFile nRecord"
	return
    fi

    nRecord=$1

    #------------------------------------------------------------
    # Create the test file, that just writes the records and runs the
    # queries
    #------------------------------------------------------------

    prefix="ts_put_"$nRecord
    filename="tests/"$prefix".erl"

    echo "-module($prefix)." > $filename
    echo "-behavior(riak_test)." >> $filename
    echo "-export([confirm/0])." >> $filename
    echo "" >> $filename
    echo "-include_lib(\"profiler/include/profiler.hrl\")." >> $filename
    echo "" >> $filename
    echo "confirm() ->" >> $filename
    echo "  profiler:profile({prefix, \"/tmp/client_profiler_results\"})," >> $filename
    echo "" >> $filename
    echo "  DDL  = ts_api_util:get_ddl(api)," >> $filename
    echo "  ts_api_util:setup_cluster_put_timeseries(single, n_val_one, DDL, $nRecord, 1, true)," >> $filename
    echo "  pass." >> $filename

    #------------------------------------------------------------
    # Now create a file to measure the profiler itself
    #------------------------------------------------------------

    filename="tests/ts_profiler_baseline.erl"

    echo "-module(ts_profiler_baseline)." > $filename
    echo "-behavior(riak_test)." >> $filename
    echo "-export([confirm/0])." >> $filename
    echo "" >> $filename
    echo "-include_lib(\"profiler/include/profiler.hrl\")." >> $filename
    echo "" >> $filename
    echo "foldProf(N) ->" >> $filename
    echo "    foldProf(N, N)." >> $filename
    echo "" >> $filename
    echo "foldProf(_N, 0) ->" >> $filename
    echo "    ok;" >> $filename
    echo "foldProf(N, Acc) ->" >> $filename
    echo "    profiler:perf_profile({start, 1, ?FNNAME()})," >> $filename
    echo "    profiler:perf_profile({stop, 1})," >> $filename
    echo "    foldProf(N, Acc-1)." >> $filename
    echo "" >> $filename
    echo "confirm() ->" >> $filename
    echo "    profiler:profile({prefix, \"/tmp/client_profiler_results\"})," >> $filename
    echo "" >> $filename
    echo "    profiler:perf_profile({start, 0, ?FNNAME()})," >> $filename
    echo "    foldProf(1000000)," >> $filename
    echo "    profiler:perf_profile({stop, 0})," >> $filename
    echo "" >> $filename
    echo "    pass." >> $filename
}

runPutProfile()
{
    echo "Narg = $#"
    
    if [ $# -lt 2 ]
    then
	echo "Usage: runPutProfile nRecord"
	return
    fi

    nRecord=$1

    annotate "Creating profiler output directories" "green"

    if [ ! -d /tmp/client_profiler_results ]
    then
	mkdir /tmp/client_profiler_results
    fi

    if [ ! -d /tmp/server_profiler_results ]
    then
	mkdir /tmp/server_profiler_results
    fi

    #------------------------------------------------------------
    # Create the test files
    #------------------------------------------------------------

    annotate "Creating test files" "green"

    writePutFiles $nRecord
    
    filePrefix="ts_put_"$nRecord

    outDir=$filePrefix"_output"
    graphPrefix=$filePrefix
    basePrefix=$filePrefix"_base"

    #------------------------------------------------------------
    # Create the output directory if it doesn't exist
    #------------------------------------------------------------

    annotate "Creating output directory $outDir" "green"

    echo "dir  = $outDir"
    echo "base = $basePrefix"
    echo "file = $filePrefix"
    
    if [ ! -d $outDir ]
    then
	git clone https://gist.github.com/erikleitch/8191db35b09bc8357df4
	mv 8191db35b09bc8357df4 $outDir
    else
	cd $outDir
	git pull
	cd ../
    fi

    if [ ! -d riak_graphviz ]
    then
	git clone ssh://erikleitch@github.com/erikleitch/riak_graphviz.git riak_graphviz
    else
	cd riak_graphviz
	git pull
	cd ../
    fi

    cp riak_graphviz/riak_graphviz.py $outDir
    
    echo "import riak_ts_profiles as rp" > $outDir/makeGraph.py
    echo "rp.makePutGraph('$graphPrefix', $nRecord, 'client.txt', 'server.txt', 'clientcomp.txt', 'profbase.txt')" >> $outDir/makeGraph.py

    #------------------------------------------------------------
    # Make sure profiler output directories exist
    #------------------------------------------------------------
    
    if [ ! -d ./client_profiler_results ]
    then
	mkdir ./client_profiler_results
    fi

    if [ ! -d ./server_profiler_results ]
    then
	mkdir ./server_profiler_results
    fi

    #------------------------------------------------------------
    # Copy scripts we need from the profiling scripts dir
    #------------------------------------------------------------

    copyscripts
    
    #------------------------------------------------------------
    # Comment out the profiler macros, and run the test, to get an
    # idea of the impact of the profiling
    #------------------------------------------------------------

    annotate "Compiling with profiler macros commented out " "green"
    
    riakTestDir=`pwd`

    cd $riakTestDir
    commentVar deps/profiler/include/profiler.hrl PROFILE
    cd $riakTestDir/deps/profiler
    make

    cd $riakTestDir
    commentVar riak_ee/deps/profiler/include/profiler.hrl PROFILE
    cd $riakTestDir/riak_ee/deps/profiler
    make

    cd $riakTestDir/riak_ee
    redev_fn $riakTestDir 1

    cd $riakTestDir
    make

    annotate "Running test with profiler macros commented out " "green"

    riaktest $filePrefix
    copylast /tmp $outDir "comp"

    #------------------------------------------------------------
    # Now make sure the profile preprocessor directive is defined in
    # both the client and server, and run first the baseline, then a
    # test measuring the profiler timing, then the actual test itself
    # ------------------------------------------------------------

    annotate "Compiling with profiler macros uncommented..." "green"
    
    cd $riakTestDir
    uncommentVar deps/profiler/include/profiler.hrl PROFILE
    cd $riakTestDir/deps/profiler
    make

    cd $riakTestDir
    uncommentVar riak_ee/deps/profiler/include/profiler.hrl PROFILE
    cd $riakTestDir/riak_ee/deps/profiler
    make
    
    cd $riakTestDir/riak_ee
    redev_fn $riakTestDir 1

    cd $riakTestDir
    make
    
    #------------------------------------------------------------
    # Measure the profiler itself
    #------------------------------------------------------------

    annotate "Measuring profiler..." "green"
    
    riaktest ts_profiler_baseline
    copylast /tmp $outDir "profbase"

    #------------------------------------------------------------
    # Run the put test
    #------------------------------------------------------------
    
    annotate "Running put test..." "green"
    
    riaktest $filePrefix
    copylast /tmp $outDir "test"

    #------------------------------------------------------------
    # Finally generate the graph
    #------------------------------------------------------------

    cd $outDir
    python makeGraph.py
    cd ../
    preview $outDir"/"$graphPrefix".png"
}

getlast()
{
    if [ $# -lt 1 ]
    then
	echo "Usage: getlast dir"
	return
    fi

    dir=$1

    unset files
    unset times
    
    iFile=0
    for file in $dir/*.txt
    do 
	times[iFile]=`stat -t %s $file | awk '{print $10}'`
	files[iFile]=$file
	iFile=$[$iFile+1]
    done

    arr2=( $(
	    for el in "${times[@]}"
	    do
		echo "$el"
	    done | sort -r) )

    latest=${arr2[0]}

    iFile=0
    for el in "${files[@]}"
    do
	if [ ${times[iFile]} = $latest ] 
	then
	    file=${files[iFile]}
	    echo $file
	fi
	iFile=$[$iFile+1]
    done
}

copylast()
{
    inDir=$1
    outDir=$2
    type=$3

    case $type in
	"test")
	    cp $(getlast $inDir/client_profiler_results) $outDir/client.txt
	    cp $(getlast $inDir/server_profiler_results) $outDir/server.txt
	    ;;
	"base")
	    cp $(getlast $inDir/client_profiler_results) $outDir/clientbase.txt
	    cp $(getlast $inDir/server_profiler_results) $outDir/serverbase.txt
	    ;;
	"profbase")
	    cp $(getlast $inDir/client_profiler_results) $outDir/profbase.txt
	    ;;
	"comp")
	    cp $(getlast $inDir/client_profiler_results) $outDir/clientcomp.txt
	    ;;
	*)
	    ;;
    esac
}

copyscripts()
{
    cp $RIAK_PROF_BASE/erlang_scripts/timeseries_util.erl tests
    cp $RIAK_PROF_BASE/erlang_scripts/ts_api_util.erl tests
}
