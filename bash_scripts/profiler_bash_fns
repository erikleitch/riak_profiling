#!/bin/bash

redev_fn()
{
    riakTestDir=$1
    nNode=$2

    \rm -rf dev
    make devrel DEVNODES=$nNode
    $riakTestDir/bin/rtdev-current.sh
}

#------------------------------------------------------------
# Insert an -include_lib line after the specified line
#------------------------------------------------------------

insertIncludeLineAfter()
{
    arr=(`for i; do echo ${i// /^}; done`)
    file=$(valOrDef file '' ${arr[@]})
    after=$(valOrDef after '-module' ${arr[@]})
    cmd="emacs --batch --load $RIAK_PROF_BASE/emacs_scripts/emacs_erlang_macros --file $file --eval '(insert-prof-include-line-after $after)'"
    echo "cmd = $cmd"
    eval $cmd
}

#------------------------------------------------------------
# Insert an -include_lib line before the specified line
#------------------------------------------------------------

insertIncludeLineBefore()
{
    arr=(`for i; do echo ${i// /^}; done`)
    file=$(valOrDef file '' ${arr[@]})
    before=$(valOrDef before '-module' ${arr[@]})
    cmd="emacs --batch --load $RIAK_PROF_BASE/emacs_scripts/emacs_erlang_macros --file $file --eval '(insert-prof-include-line-before $before)'"
    eval $cmd
}

#------------------------------------------------------------
# Insert a pair of profiling statements
#------------------------------------------------------------

insertProfPair()
{
    arr=(`for i; do echo ${i// /^}; done`)

    echo "args = ${arr[@]}"
    
    file=$(valOrDef file '' ${arr[@]})
    fnstart=$(valOrDef fnstart '' ${arr[@]})
    before=$(valOrDef before '' ${arr[@]})
    after=$(valOrDef after '' ${arr[@]})
    tag=$(valOrDef tag '' ${arr[@]})
    replace=$(valOrDef replace 'true' ${arr[@]})

    case $tag in
	(\"\")
            cmd="emacs --batch --load $RIAK_PROF_BASE/emacs_scripts/emacs_erlang_macros --file $file --eval '(insert-prof-pair-def $fnstart $before $after $replace)'"
	    echo "cmd1 = $cmd"
	    eval $cmd
	    ;;
	(*)
	    cmd="emacs --batch --load $RIAK_PROF_BASE/emacs_scripts/emacs_erlang_macros --file $file --eval '(insert-prof-pair $fnstart $before $after $tag $replace)'"
	    echo "cmd2 = $cmd" 
	    eval $cmd
	    ;;
    esac
}

insertProfBefore()
{
    arr=(`for i; do echo ${i// /^}; done`)
    
    file=$(valOrDef file '' ${arr[@]})
    fnstart=$(valOrDef fnstart '' ${arr[@]})
    before=$(valOrDef before '' ${arr[@]})
    literal=$(valOrDef replace 'false' ${arr[@]})	
    tag=$(valOrDef tag '' ${arr[@]})
    cmd=$(valOrDef cmd '' ${arr[@]})

    case $tag in
	(\"\")
            evalcmd="emacs --batch --load $RIAK_PROF_BASE/emacs_scripts/emacs_erlang_macros --file $file --eval '(insert-prof-before-line-def $fnstart $before $cmd)'"
	    eval $evalcmd
	    ;;
	(*)
	    evalcmd="emacs --batch --load $RIAK_PROF_BASE/emacs_scripts/emacs_erlang_macros --file $file --eval '(insert-prof-before-line $fnstart $before $tag $cmd $literal)'"
	    echo "svalcmd = $evalcmd"
eval $evalcmd
	    ;;
    esac
}

insertProfAfter()
{
    arr=(`for i; do echo ${i// /^}; done`)
    
    file=$(valOrDef file '' ${arr[@]})
    fnstart=$(valOrDef fnstart '' ${arr[@]})
    after=$(valOrDef after '' ${arr[@]})
    literal=$(valOrDef replace 'false' ${arr[@]})	
    replace=$(valOrDef replace 'true' ${arr[@]})
    tag=$(valOrDef tag '' ${arr[@]})
    cmd=$(valOrDef cmd '' ${arr[@]})

    case $tag in
	(\"\")
            evalcmd="emacs --batch --load $RIAK_PROF_BASE/emacs_scripts/emacs_erlang_macros --file $file --eval '(insert-prof-after-line-def $fnstart $after $cmd $replace)'"
	    eval $evalcmd
	    ;;
	(*)
	    evalcmd="emacs --batch --load $RIAK_PROF_BASE/emacs_scripts/emacs_erlang_macros --file $file --eval '(insert-prof-after-line $fnstart $after $tag $cmd $replace $literal)'"
	    eval $evalcmd
	    ;;
    esac
}

insertRet()
{
    arr=(`for i; do echo ${i// /^}; done`)
    
    file=$(valOrDef file '' ${arr[@]})
    fnstart=$(valOrDef fnstart '' ${arr[@]})
    before=$(valOrDef before '' ${arr[@]})
    after=$(valOrDef after '' ${arr[@]})
    next=$(valOrDef next '' ${arr[@]})

    cmd="emacs --batch --load $RIAK_PROF_BASE/emacs_scripts/emacs_erlang_macros --file $file --eval '(insert-prof-ret $fnstart $before $after $next)'"
    echo "cmd = $cmd"     
    eval $cmd
}

add_ppp_ts1.1_riakc()
{
    #------------------------------------------------------------
    # Set up riakc for profiling
    #------------------------------------------------------------
    
    insertIncludeLineAfter file=deps/riakc/src/riakc_ts.erl after='-include("riakc.hrl")'
    insertRet              file=deps/riakc/src/riakc_ts.erl fnstart='put(Pid, TableName, ColumnNames, Measurements) ->' before='riakc_ts_put_operator:deserialize' after='riakc_ts_put_operator:deserialize' next='delete'
    insertProfPair         file=deps/riakc/src/riakc_ts.erl fnstart='put(Pid, TableName, ColumnNames, Measurements) ->' before='UseNative' after='riakc_ts_put_operator:deserialize'
    insertProfPair         file=deps/riakc/src/riakc_ts.erl before='Ret =' after='riakc_ts_put_operator:deserialize(Response)' tag='riakc_ts_put_operator:deserialize'

    insertIncludeLineAfter file=deps/riakc/src/riakc_pb_socket.erl after='-deprecated'
    insertRet              file=deps/riakc/src/riakc_pb_socket.erl fnstart='encode_request_message(UseNativeEncoding, #request{msg=Msg' before='{Req' after='{Req' next='%% If the socket'
    insertProfPair         file=deps/riakc/src/riakc_pb_socket.erl fnstart='encode_request_message(UseNativeEncoding, #request{msg=Msg' before='Ret' after='{Req'

    insertRet              file=deps/riakc/src/riakc_pb_socket.erl fnstart='handle_call({req, true, Msg, Timeout}, From, State) ->' before='{noreply' after='{noreply,' next='handle_call({req, false, Msg, Timeout}, From, State) ->'
    insertProfPair         file=deps/riakc/src/riakc_pb_socket.erl fnstart='handle_call({req, true, Msg, Timeout}, From, State) ->' before='Ret =' after='{noreply'

    insertProfBefore       file=deps/riakc/src/riakc_pb_socket.erl fnstart='handle_info({Proto, Sock, Data}' before='Resp =' cmd=start
    insertProfBefore       file=deps/riakc/src/riakc_pb_socket.erl fnstart='handle_info({Proto, Sock, Data}' before='{noreply' cmd=stop
}

add_ppp_ts1.3_riakc()
{
    #------------------------------------------------------------
    # Set up riakc for profiling
    #------------------------------------------------------------
    
    insertIncludeLineAfter file=deps/riakc/src/riakc_ts.erl after='-include("riakc.hrl")'
    insertRet              file=deps/riakc/src/riakc_ts.erl fnstart='put(Pid, Table, Measurements, Options)' before='riakc_ts_put_operator:deserialize' after='riakc_ts_put_operator:deserialize' next='delete'
    insertProfPair         file=deps/riakc/src/riakc_ts.erl fnstart='put(Pid, Table, Measurements, Options)' before='UseTTB' after='riakc_ts_put_operator:deserialize'
    insertProfPair         file=deps/riakc/src/riakc_ts.erl before='Ret =' after='riakc_ts_put_operator:deserialize(Response)' tag='riakc_ts_put_operator:deserialize'

    insertIncludeLineAfter file=deps/riakc/src/riakc_pb_socket.erl after='-deprecated'
    insertRet              file=deps/riakc/src/riakc_pb_socket.erl fnstart='encode_request_message(#request{msg=Msg' before='{Req' after='{Req' next='%% If the socket'
    insertProfPair         file=deps/riakc/src/riakc_pb_socket.erl fnstart='encode_request_message(#request{msg=Msg' before='Ret' after='UseTTB)},'

    insertRet              file=deps/riakc/src/riakc_pb_socket.erl fnstart='handle_call({req, Msg, Timeout}, From, State) ->' before='{noreply' after='{noreply,' next='handle_call({req, Msg, Timeout, Ctx}, From, State) ->'
    insertProfPair         file=deps/riakc/src/riakc_pb_socket.erl fnstart='handle_call({req, Msg, Timeout}, From, State) ->' before='Ret =' after='{noreply'

    insertProfBefore       file=deps/riakc/src/riakc_pb_socket.erl fnstart='handle_info({Proto, Sock, Data}' before='Resp =' cmd=start
    insertProfBefore       file=deps/riakc/src/riakc_pb_socket.erl fnstart='handle_info({Proto, Sock, Data}' before='{noreply' cmd=stop
}

add_ppp_ts1.1_riak_api()
{
    #------------------------------------------------------------
    # Set up riak_api for profiling
    #------------------------------------------------------------
    
    insertIncludeLineAfter file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl after='-export_type'
    insertProfBefore       file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl fnstart='init(' before='riak_api_stat:update' tag='/tmp/server_profiler_results' cmd=prefix
    insertRet              file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl fnstart='process_message(atom' before='Service:process' after='end.' next='@doc'
    insertProfPair         file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl fnstart='process_message(atom' before='Ret =' after='end,'

    insertRet              file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl fnstart='connected({msg, MsgCode' before='try' after='end;' next='connected(_Event'
    insertProfBefore       file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl fnstart='connected({msg, MsgCode' before='Ret =' cmd=start
    insertProfBefore       file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl fnstart='connected({msg, MsgCode' before='Ret;' cmd=stop
}

add_ppp_ts1.3_riak_api()
{
    #------------------------------------------------------------
    # Set up riak_api for profiling
    #------------------------------------------------------------
    
    insertIncludeLineAfter file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl after='-export_type'
    insertProfBefore       file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl fnstart='init(' before='riak_api_stat:update' tag='/tmp/server_profiler_results' cmd=prefix
    insertRet              file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl fnstart='process_message(atom' before='Service:process' after='end.' next='@doc'
    insertProfPair         file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl fnstart='process_message(atom' before='Ret =' after='end,'

    insertRet              file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl fnstart='connected({msg, MsgCode' before='try' after='end;' next='connected(_Event'
    insertProfBefore       file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl fnstart='connected({msg, MsgCode' before='Ret =' cmd=start
    insertProfBefore       file=riak_ee/deps/riak_api/src/riak_api_pb_server.erl fnstart='connected({msg, MsgCode' before='Ret;' cmd=stop
}

add_ppp_ts1.1_riak_kv()
{
    #------------------------------------------------------------
    # Set up riak_kv for profiling
    #------------------------------------------------------------

#    insertIncludeLineBefore file=riak_ee/deps/riak_kv/src/riak_kv_pb_timeseries.erl before='-spec init() -> any()'
#    insertRet               file=riak_ee/deps/riak_kv/src/riak_kv_pb_timeseries.erl fnstart='process_tsreq(Table' before='case (catch' after='end.' next='-spec process'
#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_pb_timeseries.erl fnstart='process_tsreq(Table' before='Mod =' after='end,'

#    insertIncludeLineBefore file=riak_ee/deps/riak_kv/src/riak_kv_eleveldb_backend.erl before='-define(API_VERSION'
#    insertRet               file=riak_ee/deps/riak_kv/src/riak_kv_eleveldb_backend.erl fnstart='sync_put(Context' before='case eleveldb:sync_put' after='end.' next='indexes_fixed'
#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_eleveldb_backend.erl fnstart='sync_put(Context' before='Ret =' after='end,'

#    insertRet               file=riak_ee/deps/riak_kv/src/riak_kv_pb_timeseries.erl fnstart='decode' before='case Msg' after='end.' next='-spec'
#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_pb_timeseries.erl fnstart='decode' before='Msg =' after='end,'

#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_pb_timeseries.erl fnstart='put_data(Data, Table' before='{ReqIds, FailReqs' after='{\\[\\], 0}, PreflistData),' tag='putfold'

#    insertRet               file=riak_ee/deps/riak_kv/src/riak_kv_pb_timeseries.erl fnstart='put_data(Data, Table, Mod) ->' before='length(lists' after='FailReqs.' next='-spec make_ts_keys'
#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_pb_timeseries.erl fnstart='put_data(Data, Table, Mod) ->' before='DDL =' after='FailReqs,'

#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_pb_timeseries.erl fnstart='build_object(Bucket, Mod, DDL, Row, PK) ->' before='Obj = Mod' after='dict:from_list'
    
    #  insertIncludeLineAfter  file=riak_ee/deps/riak_kv/src/riak_kv_w1c_worker.erl after='-include("riak_kv_wm_raw.hrl")'
    #  insertRet               file=riak_ee/deps/riak_kv/src/riak_kv_w1c_worker.erl fnstart='async_put_replies(ReqIdTuples, Options) ->' before='async_put_reply_loop' after='find_put_timeout' next='%%%==='
  #  insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_w1c_worker.erl fnstart='async_put_replies(ReqIdTuples, Options) ->' before='Ret =' after='find_put_timeout'

#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_w1c_worker.erl fnstart='async_put(RObj, W, PW, Bucket, NVal, LocalKey, EncodeFn, Preflist) ->' before='StartTS' after='size=size'
#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_w1c_worker.erl fnstart='handle_cast({put, Bucket,' before='NewState = case' after='end,'

#    insertIncludeLineAfter  file=riak_ee/deps/riak_kv/src/riak_object.erl after='-export(\\[is_ts/1\\]).'
#    insertRet               file=riak_ee/deps/riak_kv/src/riak_object.erl fnstart='encode(Bin, msgpack) ->' before='encode_msgpack(Bin).' after='encode_msgpack(Bin).' next='encode_msgpack(Bin) ->'
#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_object.erl fnstart='encode(Bin, msgpack) ->' before='Ret =' after='encode_msgpack(Bin),'

    insertRet               file=riak_ee/deps/riak_kv/src/riak_object.erl fnstart='to_binary(v1, #r_object' before='new_v1' after='new_v1' next='%% @doc'
    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_object.erl fnstart='to_binary(v1, #r_object' before='Ret =' after='new_v1'
}

add_ppp_ts1.3_riak_kv()
{
    #------------------------------------------------------------
    # Set up riak_kv for profiling
    #------------------------------------------------------------

#    insertIncludeLineBefore file=riak_ee/deps/riak_kv/src/riak_kv_ts_svc.erl before='decode_query_common(Q'
#    insertRet               file=riak_ee/deps/riak_kv/src/riak_kv_ts_svc.erl fnstart='sub_tsputreq(Mod' before='case riak_kv_ts' after='end.' next='%% ----'
#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_ts_svc.erl fnstart='sub_tsputreq(Mod' before='Ret =' after='end,'

#    insertIncludeLineBefore file=riak_ee/deps/riak_kv/src/riak_kv_eleveldb_backend.erl before='-define(API_VERSION'
#    insertRet               file=riak_ee/deps/riak_kv/src/riak_kv_eleveldb_backend.erl fnstart='sync_put(Context' before='case eleveldb:sync_put' after='end.' next='indexes_fixed'
#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_eleveldb_backend.erl fnstart='sync_put(Context' before='Ret =' after='end,'

#    insertIncludeLineBefore file=riak_ee/deps/riak_kv/src/riak_kv_ttb_ts.erl before='-spec init'
#    insertRet               file=riak_ee/deps/riak_kv/src/riak_kv_ttb_ts.erl fnstart='decode' before='case Msg' after='end.' next='-spec'
#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_ttb_ts.erl fnstart='decode' before='Msg =' after='end,'

#    insertIncludeLineBefore file=riak_ee/deps/riak_kv/src/riak_kv_ts_api.erl before='-spec api_call'
#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_ts_api.erl fnstart='put_data_to_partitions(Data, Bucket' before='{ReqIds, FailReqs' after='{\\[\\], 0}, PreflistData),' tag='putfold'

    #    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_ts_api.erl fnstart='put_data_to_partitions(Data, Bucket' before='DataForVnode = pick_batch_option' after='length(Records)),' tag='batchoptionsblock'

#        insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_ts_api.erl fnstart='build_object(Bucket, Mod, DDL, Row, PK) ->' before='Obj = Mod' after='dict:from_list'
    
  #  insertRet               file=riak_ee/deps/riak_kv/src/riak_kv_ts_api.erl fnstart='put_data(Data, Table, Mod) ->' before='case riak_core' after='end.' next='put_data_to_partitions(Data, Bucket, BucketProps, DDL, Mod) ->'
  #  insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_ts_api.erl fnstart='put_data(Data, Table, Mod) ->' before='DDL =' after='end,'
    

#    insertIncludeLineAfter  file=riak_ee/deps/riak_kv/src/riak_kv_w1c_worker.erl after='-include("riak_kv_wm_raw.hrl")'
#    insertRet               file=riak_ee/deps/riak_kv/src/riak_kv_w1c_worker.erl fnstart='async_put_replies(ReqIdTuples, Options) ->' before='async_put_reply_loop' after='find_put_timeout' next='%%%==='
#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_w1c_worker.erl fnstart='async_put_replies(ReqIdTuples, Options) ->' before='Ret =' after='find_put_timeout'

    #       insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_w1c_worker.erl fnstart='async_put(RObj, W, PW, Bucket, NVal, PartitionIdx, Key, EncodeFn, Preflist) ->' before='StartTS' after='size=size'

#           insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_w1c_worker.erl fnstart='handle_cast({put, Bucket,' before='NewState = case' after='end,'

#    insertIncludeLineAfter  file=riak_ee/deps/riak_kv/src/riak_object.erl after='-export(\\[is_ts/1\\]).'
#    insertRet               file=riak_ee/deps/riak_kv/src/riak_object.erl fnstart='encode(Bin, msgpack) ->' before='encode_msgpack(Bin).' after='encode_msgpack(Bin).' next='encode_msgpack(Bin) ->'
#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_object.erl fnstart='encode(Bin, msgpack) ->' before='Ret =' after='encode_msgpack(Bin),'

#    insertIncludeLineAfter  file=riak_ee/deps/riak_kv/src/riak_kv_ts_util.erl after='-include("riak_kv_ts.hrl").'

#    insertRet               file=riak_ee/deps/riak_kv/src/riak_kv_ts_util.erl fnstart='get_table_ddl(Table) when' before='case riak_core' after='end.' next='%%'
#    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_kv_ts_util.erl fnstart='get_table_ddl(Table) when' before='Ret =' after='end,'

    insertRet               file=riak_ee/deps/riak_kv/src/riak_object.erl fnstart='to_binary(v1, #r_object' before='new_v1' after='new_v1' next='%% @doc'
    insertProfPair          file=riak_ee/deps/riak_kv/src/riak_object.erl fnstart='to_binary(v1, #r_object' before='Ret =' after='new_v1'
}

add_ppp_ts1.1_riak_core()
{
    #------------------------------------------------------------
    # Set up riak_core for profiling
    #------------------------------------------------------------

    insertIncludeLineBefore file=riak_ee/deps/riak_core/src/riak_core_vnode.erl before='%% handle_exit/3'
    insertRet               file=riak_ee/deps/riak_core/src/riak_core_vnode.erl fnstart='vnode_command(Sender, Request, State=#state{mod=Mod,' before='case catch' after='end.' next='vnode_coverage'
    insertProfPair          file=riak_ee/deps/riak_core/src/riak_core_vnode.erl fnstart='vnode_command(Sender, Request, State=#state{mod=Mod,' before='Ret =' after='end,'
}

add_ppp_ts1.3_riak_core()
{
    #------------------------------------------------------------
    # Set up riak_core for profiling
    #------------------------------------------------------------

    insertIncludeLineBefore file=riak_ee/deps/riak_core/src/riak_core_vnode.erl before='%% handle_exit/3'
#    insertRet               file=riak_ee/deps/riak_core/src/riak_core_vnode.erl fnstart='vnode_command(Sender, Request, State=#state{mod=Mod,' before='case catch' after='end.' next='vnode_coverage'
#    insertProfPair          file=riak_ee/deps/riak_core/src/riak_core_vnode.erl fnstart='vnode_command(Sender, Request, State=#state{mod=Mod,' before='Ret =' after='end,'
}

add_ppp_ts1.3()
{
    add_ppp_ts1.3_riakc
    add_ppp_ts1.3_riak_api
    add_ppp_ts1.3_riak_kv
    add_ppp_ts1.3_riak_core
}

